<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="rules">
    <option name="sonarRulesByRuleKey">
      <map>
        <entry key="squid:LeftCurlyBraceEndLineCheck">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;&#10;Sharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.&#10;This rule make it mandatory to place left curly braces at the end of lines of code.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;The following code snippet illustrates this rule:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;public void myMethod() {              // Compliant&#10;  if(something)&#10;  {                                   // Non-Compliant&#10;    executeTask();&#10;  } else {                            // Compliant&#10;    doSomethingElse();&#10;  }&#10;  if( param1 &amp;&amp; param2 &amp;&amp; param3&#10;    &amp;&amp; something3 &amp;&amp; something4)&#10;  {                                   // Non-Compliant&#10;    executeAnotherTask();&#10;  }&#10;}&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:LeftCurlyBraceEndLineCheck" />
              <option name="langName" value="Java" />
              <option name="name" value="Left curly braces should be located at the end of lines of code" />
              <option name="severity" value="MAJOR" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:S1186">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;There are three reasons for a method not to have a method body:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;  &lt;li&gt;It is an unintentional omission, and should be fixed.&lt;/li&gt;&#10;  &lt;li&gt;It is not yet, or never will be, supported. In this case an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; should be thrown.&lt;/li&gt;&#10;  &lt;li&gt;The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;The following code snippet:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;// Non-Compliant&#10;public void doSomething() {&#10;}&#10;&lt;/pre&gt;&#10;&#10;should be refactored into:&#10;&#10;&lt;pre&gt;&#10;// Compliant&#10;@Override&#10;public void doSomethingElse() {&#10;  // Do nothing because of X and Y.&#10;}&#10;&lt;/pre&gt;&#10;&#10;or:&#10;&#10;&lt;pre&gt;&#10;// Compliant&#10;@Override&#10;public void doSomethingElse() {&#10;  throw new UnsupportedOperationException();&#10;}&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Empty methods not having any nested comments are tolerated in Abstract classes as those empty methods are usual when implementing the visitor pattern.&lt;/p&gt;" />
              <option name="key" value="squid:S1186" />
              <option name="langName" value="Java" />
              <option name="name" value="Methods should not be empty" />
              <option name="severity" value="MAJOR" />
            </Rule>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>